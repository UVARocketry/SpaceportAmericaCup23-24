#include <cmath>
#include <iostream>
double rho(double h) {
    return (0.9093 - 1.225) / 3000 * h + 1.225;
}

struct State {
    double y;
    double v;
};

double C_D = 0.60;
const double A = M_PI * std::pow(0.1524 / 2, 2);
double m = 24.446;
double g = 9.82;

// double heights[] = {
//
//     125.66904,
//     125.63856,
//     129.02184,
//     132.37464,
//     136.64184,
//     141.70152,
//     147.61464,
//     154.5336,
//     162.27552,
//     170.80992,
//     180.13680000000002,
//     190.31712,
//     201.3204,
//     213.11616000000004,
//     225.49104,
//     238.506,
//     252.13056000000003,
//     266.0904,
//     280.08072,
//     293.79672,
//     307.42128,
//     320.89344,
//     334.24368,
//     347.53296000000006,
//     360.63936,
//     373.50192,
//     386.27304,
//     398.95272000000006,
//     411.48,
//     423.91584,
//     436.22976000000006,
//     448.42176000000006,
//     460.46136,
//     472.2876,
//     484.11384,
//     495.81816,
//     507.30912000000006,
//     518.7696000000001,
//     530.10816,
//     541.2943200000001,
//     552.32808,
//     563.2704,
//     574.0908000000001,
//     584.78928,
//     595.2744,
//     605.72904,
//     636.14808,
//     646.08456,
//     655.9296,
//     665.74416,
//     675.37584,
//     684.91608,
//     694.36488,
//     703.66128,
//     712.8967200000001,
//     721.9797599999999,
//     730.97136,
//     739.87152,
//     757.3060800000001,
//     765.87096,
//     774.3444000000001,
//     782.6959200000001,
//     790.9255200000001,
//     799.0332000000001,
//     822.71616,
//     830.4276000000001,
//     838.0171200000001,
//     845.48472,
//     852.8608800000001,
//     860.11512,
//     867.2474400000001,
//     874.34928,
//     881.2682400000001,
//     888.1567200000001,
//     894.95376,
//     901.62888,
//     908.18208,
//     914.61336,
//     920.9532,
//     927.2016,
//     933.32808,
//     939.36312,
//     945.27624,
//     951.09792,
//     956.79768,
//     962.37552,
//     978.52992,
//     983.71152,
//     988.7712,
//     993.76992,
//     998.64672,
//     1003.4016,
//     1012.60656,
//     1021.3848,
//     1025.652,
//     1029.79728,
//     1033.85112,
//     1037.78304,
//     1041.654,
//     1045.37256,
//     1048.99968,
//     1052.5658400000002,
//     1055.9796,
//     1059.3324,
//     1062.56328,
//     1065.70272,
//     1068.75072,
//     1071.70728,
//     1074.54192,
//     1079.9064,
//     1082.46672,
//     1084.90512,
//     1087.25208,
//     1089.47712,
//     1091.61072,
//     1093.6224,
//     1095.54264,
//     1097.40192,
//     1099.13928,
//     1100.7852,
//     1102.33968,
//     1103.80272,
//     1105.1438400000002,
//     1106.39352,
//     1107.55176,
//     1108.61856,
//     1109.56344,
//     1110.44736,
//     1111.17888,
//     1111.8494400000002,
//     1112.42856,
//     1112.88576,
//     1113.25152,
//     1113.55632,
//     1113.76968,
//     1114.10496,
//     1114.47072,
//     1114.77552,
//     1114.9584,
//     1114.98888,
// };

double heights[] = {

    1400.000000, 1400.061013, 1400.534549, 1401.611201, 1403.383478,
    1405.864366, 1409.049096, 1412.947501, 1417.567509, 1422.917930,
    1429.007447, 1435.844173, 1443.435682, 1451.789025, 1460.910837,
    1470.807114, 1481.481980, 1492.938401, 1505.178479, 1518.203656,
    1532.014562, 1546.610884, 1561.990856, 1578.151036, 1595.086055,
    1612.789181, 1631.252524, 1650.466357, 1670.419499, 1691.100975,
    1712.499671, 1734.602808, 1757.396443, 1780.866677, 1804.998656,
    1829.775345, 1855.178908, 1881.190537, 1907.788161, 1934.944690,
    1962.634549, 1990.833047, 2019.497124, 2048.560147, 2077.871396,
    2107.229944, 2136.478436, 2165.495731, 2194.241006, 2222.707737,
    2250.897175, 2278.813059, 2306.459378, 2333.839898, 2360.958279,
    2387.818065, 2414.422700, 2440.775550, 2466.879914, 2492.739007,
    2518.355958, 2543.733804, 2568.875504, 2593.783939, 2618.461942,
    2642.912283, 2667.137654, 2691.140667, 2714.923873, 2738.489776,
    2761.840829, 2784.979420, 2807.907872, 2830.628464, 2853.143425,
    2875.454927, 2897.565092, 2919.475996, 2941.189679, 2962.708134,
    2984.033302, 3005.167078, 3026.111320, 3046.867856, 3067.438472,
    3087.824912, 3108.028875, 3128.052031, 3147.896023, 3167.562457,
    3187.052902, 3206.368889, 3225.511933, 3244.483470, 3263.285187,
    3281.918610, 3300.384950, 3318.685500, 3336.821165, 3354.793229,
    3372.603199, 3390.252467, 3407.742340, 3425.074035, 3442.248714,
    3459.267507, 3476.131587, 3492.842115, 3509.400115, 3525.806646,
    3542.062795, 3558.170006, 3574.129217, 3589.941218, 3605.606925,
    3621.127268, 3636.503174, 3651.735541, 3666.825263, 3681.773303,
    3696.580556, 3711.247564, 3725.774961, 3740.163736, 3754.414900,
    3768.529360, 3796.351581, 3810.060908, 3823.636710, 3837.079710,
    3850.390621, 3863.570142, 3876.618965, 3889.537770, 3902.327228,
    3914.988002, 3927.520745, 3939.926102, 3952.204701, 3964.357164,
    3976.384095, 3988.286086, 4000.063720, 4011.717568, 4023.248199,
    4034.656167, 4045.942022, 4057.106301, 4068.149536, 4079.072247,
    4089.874949, 4100.558145, 4111.122332, 4121.567997, 4131.895618,
    4142.105668, 4152.198645, 4162.174972, 4172.035052, 4181.779311,
    4191.408194, 4200.922153, 4210.321606, 4219.606960, 4228.778623,
    4237.836988, 4246.782448, 4255.615380, 4264.336157, 4272.945147,
    4281.442715, 4289.829216, 4298.105005, 4306.270424, 4314.325814,
    4322.271506, 4330.107827, 4337.835096, 4345.453628, 4352.963732,
    4360.365713, 4367.659868, 4374.846494, 4381.925877, 4388.898304,
    4395.764055, 4402.523403, 4409.176620, 4415.723970, 4422.165715,
    4428.502108, 4434.733401, 4440.859842, 4446.881670, 4452.799127,
    4458.612442, 4464.321848, 4469.927569, 4475.429827, 4480.828840,
    4486.124822, 4491.317983, 4496.408531, 4501.396668, 4506.282595,
    4511.066508, 4515.748602, 4520.329067, 4524.808091, 4529.185857,
    4533.462546, 4537.638342, 4541.713418, 4545.687948, 4549.562104,
    4553.336057, 4557.009974, 4560.584020, 4564.058359, 4567.433153,
    4570.708563, 4573.884745, 4576.961860, 4579.940062, 4582.819508,
    4585.600352, 4588.282747, 4590.866847, 4593.352804, 4595.740770,
    4598.030897, 4600.223336, 4602.318239, 4604.315758, 4606.216044,
    4608.019250, 4609.725527, 4611.335030, 4612.847913, 4614.264329,
    4615.584434, 4616.808384, 4617.936336, 4618.968447, 4619.904875,
    4620.745777, 4621.491308, 4622.141635, 4622.696925, 4623.157310,
    4623.522899, 4623.793946, 4623.970756, 4624.053077,
};

double vel[] = {

    0.000000,   2.155010,   7.535423,   14.190326,  21.251441,  28.302394,
    35.403737,  42.577468,  49.837212,  57.185933,  64.618127,  72.129238,
    79.712848,  87.364992,  95.081975,  102.850322, 110.652314, 118.479772,
    126.324552, 134.179594, 142.038393, 149.885307, 157.709050, 165.486223,
    173.203171, 180.846464, 188.404104, 195.853408, 203.191086, 210.420494,
    217.532061, 224.507054, 231.342872, 238.037679, 244.572556, 250.931822,
    257.108306, 263.088983, 268.815857, 274.271856, 279.487277, 284.412944,
    288.777580, 292.221843, 293.681867, 293.288819, 291.488777, 288.831280,
    286.065695, 283.273976, 280.519922, 277.804836, 275.128050, 272.488532,
    269.885057, 267.316472, 264.781898, 262.280655, 259.812032, 257.375146,
    254.969048, 252.592868, 250.245884, 247.927517, 245.637179, 243.374143,
    241.137616, 238.926886, 236.741419, 234.580749, 232.444283, 230.331375,
    228.241474, 226.174101, 224.128734, 222.104831, 220.101920, 218.119590,
    216.157415, 214.214910, 212.291582, 210.387022, 208.500889, 206.632825,
    204.782404, 202.949193, 201.132836, 199.333043, 197.549495, 195.781812,
    194.029652, 192.292693, 190.570627, 188.863169, 187.169991, 185.490788,
    183.825317, 182.173315, 180.534600, 178.908916, 177.295959, 175.695453,
    174.107140, 172.530786, 170.966171, 169.413084, 167.871306, 166.340618,
    164.820830, 163.311734, 161.813117, 160.324701, 158.846310, 157.377797,
    155.918996, 154.469739, 153.029857, 151.599189, 150.177572, 148.764832,
    147.360806, 145.965395, 144.578486, 143.199898, 141.829450, 140.466976,
    137.765339, 136.425898, 135.093865, 133.769116, 132.451526, 131.140975,
    129.837344, 128.540515, 127.250373, 125.966801, 124.689686, 123.418914,
    122.154374, 120.895957, 119.643555, 118.397063, 117.156380, 115.921403,
    114.692037, 113.468190, 112.249769, 111.036691, 109.828868, 108.626217,
    107.428656, 106.236098, 105.048457, 103.865644, 102.687568, 101.514136,
    100.345256, 99.180853,  98.020859,  96.865202,  95.713811,  94.566613,
    93.423541,  92.284530,  91.149516,  90.018433,  88.891218,  87.767806,
    86.648131,  85.532127,  84.419729,  83.310868,  82.205481,  81.103503,
    80.004872,  78.909529,  77.817416,  76.728478,  75.642660,  74.559911,
    73.480180,  72.403416,  71.329570,  70.258593,  69.190437,  68.125053,
    67.062391,  66.002405,  64.945046,  63.890266,  62.838020,  61.788260,
    60.740944,  59.696026,  58.653466,  57.613222,  56.575254,  55.539522,
    54.505987,  53.474612,  52.445359,  51.418193,  50.393079,  49.369981,
    48.348868,  47.329705,  46.312463,  45.297110,  44.283617,  43.271957,
    42.262103,  41.254027,  40.247705,  39.243113,  38.240229,  37.239030,
    36.239497,  35.241611,  34.245353,  33.250706,  32.257657,  31.266191,
    30.276294,  29.287956,  28.301167,  27.315918,  26.332201,  25.350011,
    24.369343,  23.390193,  22.412559,  21.436441,  20.461838,  19.488753,
    18.517189,  17.547150,  16.578639,  15.611664,  14.646230,  13.682343,
    12.720012,  11.759244,  10.800046,  9.842424,   8.886383,   7.931927,
    6.979057,   6.027769,   5.078054,   4.129894,   3.183263,   2.238120,
    1.294414,   0.352074,
};

State getDeriv(double t, State prev) {
    double dens = rho(prev.y);

    State ret;
    // ret.y is actually dy/dt
    ret.y = prev.v;
    // ret.v is actually dv/dt
    ret.v = -g - 1.0 / (2.0 * m) * dens * A * C_D * std::pow(prev.v, 2);

    return ret;
}

double getApogee(State s) {
    double t = 0;
    double dt = 0.001;
    int m = (int)(1 / dt);
    double ap = 0;
    while (t < 30) {
        auto dState = getDeriv(t, s);
        s.y += dState.y * dt;
        s.v += dState.v * dt;
        // if (((int)(t * m)) % m == 0) {
        //     std::cout << "(t=" << t << ") " << s.y * 3.28084 << ", " << s.v
        //               << ", " << ap * 3.28084 << std::endl;
        // }
        if (s.y > ap) {
            ap = s.y;
        }
        if (s.y < ap) {
            break;
        }
        t += dt;
    }
    return ap;
}

double getAltitudeAuthority(State s) {
    double oldCd = C_D;
    double og = getApogee(s);
    C_D += 0.1;
    double ret = og - getApogee(s);
    C_D = oldCd;
    return ret;
}

int main() {
    double totalErr = 0;
    int len = sizeof(heights) / sizeof(double);
    double worstErr = 0;
    double t = 0;
    double convergedAt = 0;
    int consistentConverge = 0;
    double consistentConvergeAt = 0;
    double authorityAt = 0;

    for (int i = 0; i < len - 1; i++) {
        double v = (heights[i + 1] - heights[i]) / 0.1;
        double h = heights[i];
        State s;
        s.v = vel[i];
        s.y = h;
        double ap = getApogee(s);
        double err = (ap - heights[len - 1]) / heights[len - 1];
        if (t > 5) {
            totalErr += std::abs(err);
            if (std::abs(err) > std::abs(worstErr)) {
                worstErr = err;
            }
            if (std::abs(err * heights[len - 1]) < 15) {
                if (convergedAt == 0) {
                    convergedAt = t;
                }
                consistentConverge++;
                if (consistentConverge > 3 && consistentConvergeAt == 0) {
                    consistentConvergeAt = t;
                    authorityAt = getAltitudeAuthority(s);
                }
            } else {
                consistentConverge = 0;
            }
            std::cout << "(" << t << ")  ";
            std::cout << err * heights[len - 1] << std::endl;
        }
        t += 0.1;
    }
    std::cout << "Average err: " << totalErr * 100 / (len) << std::endl;
    std::cout << "Worst error: " << worstErr * 100 << std::endl;
    std::cout << "Converged at: " << convergedAt << std::endl;
    std::cout << "Consistently converged at: " << consistentConvergeAt
              << std::endl;
    std::cout << "Altitude authority at convergence: " << authorityAt
              << std::endl;
}
